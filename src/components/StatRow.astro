---
export interface Props {
  metrics: Array<{
    label: string;
    value: string;
    unit?: string;
  }>;
}

const { metrics } = Astro.props;
---

<div class="stat-row">
  {metrics.map((metric) => (
    <div class="stat-item">
      <span class="stat-label">{metric.label}</span>
      <span class="stat-value">
        {metric.value}
        {metric.unit && <span class="stat-unit">{metric.unit}</span>}
      </span>
    </div>
  ))}
</div>

<style>
  .stat-row {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin: 1.5em 0;
    padding: 1.25rem;
    background: rgba(59, 130, 246, 0.05);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 0.5rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    min-width: 0;
  }

  .stat-label {
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .stat-value {
    font-size: 1.125rem;
    font-weight: 600;
    font-family: 'SF Mono', 'JetBrains Mono', 'Menlo', 'Monaco', 'Courier New', monospace;
    color: var(--accent);
    white-space: nowrap;
  }

  .stat-unit {
    font-size: 0.875rem;
    font-weight: 400;
    color: var(--text-muted);
    margin-left: 0.25rem;
  }

  @media (max-width: 640px) {
    .stat-row {
      gap: 0.875rem;
      padding: 1rem;
    }

    .stat-item {
      flex: 1 1 calc(50% - 0.5rem);
      min-width: 0;
    }

    .stat-label {
      font-size: 0.6875rem;
    }

    .stat-value {
      font-size: 1rem;
    }

    .stat-unit {
      font-size: 0.8125rem;
    }
  }
</style>
